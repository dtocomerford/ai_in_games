using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    public static bool playerInGame = true;
    public static bool cherryEaten = false;
    public MapPCG mapPCG;
    public Walls walls;
    public Enemy enemyScript;
    public Enemy enemyScriptTwo;
    public Player playerScript;
    public FindPath findPath;

    public GameObject wallPrefab;
    public GameObject groundPrefab;
    public GameObject agentPrefab;
    public GameObject playerGameObject;
    public GameObject enemyGameObject;
    public GameObject enemyGameObjectTwo;
    public GameObject walkableNodePrefab;
    public GameObject cherryGameObject;

    public List<Node> walkableNodes = new List<Node>(); 
    public List<GameObject> cherrys = new List<GameObject>();
    public List<GameObject> enemies = new List<GameObject>();
    public List<Node> pathToGiveEnemy;
    public List<Node> pathToGiveEnemy2;

    public int[] playerPositions;
    public int playerPositionX;
    public int playerPositionZ;
    public int[] enemyPositions;
    public int[] enemyPositionsTwo;
    public int enemyPositionX;
    public int enemyPositionZ;
    public int enemyPositionX2;
    public int enemyPositionZ2;
    public bool findingPath;
    public bool pathFound;
    public int counter = 0;

    public Material playerMaterial;
    public Material enemyMaterial;




    // Start is called before the first frame update
    void Start()
    {
        findingPath = false;
        pathFound = false;

        //Generate the content such as map layout as a 2D grid
        mapPCG = new MapPCG(4, 6, 2, 1);

        //Pass in the 2D map grid and wall prefab into the walls object
        walls = GetComponent<Walls>();
        walls.Setup(mapPCG.grid, wallPrefab, groundPrefab, walkableNodePrefab);

        //Create objects for the player and enemies
        playerGameObject = Instantiate(agentPrefab, new Vector3(mapPCG.playerPosition[0], 0, mapPCG.playerPosition[1]), Quaternion.identity);
        playerScript = playerGameObject.GetComponent<Player>();
        playerGameObject.tag = "Player";

        //Call the setup script, this passes in the world position of the agent to the script
        playerScript.Setup(mapPCG.playerPosition[0], mapPCG.playerPosition[1]);

        //Set the material of the player agent 
        playerGameObject.GetComponent<Renderer>().material = playerMaterial;

        //Instantiate enemies into the game world
        enemyGameObject = Instantiate(agentPrefab, new Vector3(mapPCG.enemyPosition[0], 0, mapPCG.enemyPosition[1]), Quaternion.identity);
        enemyGameObjectTwo = Instantiate(agentPrefab, new Vector3(4, 0, 8), Quaternion.identity);

        //Instantiate cherrys in the world
        SpawnCherrys();


        //Make the box collider of the enemy a trigger so the player can be eaten 
        enemyGameObject.GetComponent<BoxCollider>().isTrigger = true;
        enemyGameObjectTwo.GetComponent<BoxCollider>().isTrigger = true;

        Material PlayerMaterial = Resources.Load<Material>("PlayerMat");
        MeshRenderer meshRenderer = enemyGameObjectTwo.gameObject.GetComponent<MeshRenderer>();
  
        // Set the new material on the GameObject
        meshRenderer.material = PlayerMaterial;


        enemyScript = enemyGameObject.GetComponent<Enemy>();
        enemyScriptTwo = enemyGameObjectTwo.GetComponent<Enemy>();

        
        findPath = GetComponent<FindPath>();
        findPath.Setup(walls);
        
        //Run setup function for the two enemies, passing in x and z positions and the wall layout 
        enemyScript.Setup(mapPCG.enemyPosition[0], mapPCG.enemyPosition[1], walls, true);
        enemyScriptTwo.Setup(4, 8, walls, true);

    }

    void Update()
    {
        if (playerGameObject != null && playerScript != null)
        {
            playerPositions = playerScript.ReturnPlayerPosition();
            playerPositionX = playerPositions[0];
            playerPositionZ = playerPositions[1];

            enemyScript.GetPlayerPositon(playerPositionX, playerPositionZ);
            enemyScriptTwo.GetPlayerPositon(playerPositionX, playerPositionZ);

        }

        //Update enemy positions
        /*
        enemyPositions = enemyScript.ReturnEnemyPosition();
        enemyPositionX = enemyPositions[0];
        enemyPositionZ = enemyPositions[1];

        enemyPositionsTwo = enemyScriptTwo.ReturnEnemyPosition();
        enemyPositionX2 = enemyPositionsTwo[0];
        enemyPositionZ2 = enemyPositionsTwo[1];
        */

        //pathToGiveEnemy = findPath.AStarSearch(mapPCG.enemyPosition[0], mapPCG.enemyPosition[1], playerPositionX, playerPositionZ);
       

        //Pass in the path generated by A* to the enemys script
        enemyScript.GhostBehaviour(playerGameObject);
        enemyScriptTwo.GhostBehaviour(playerGameObject);
        

        //Input controls for player
        if (Input.GetKeyDown(KeyCode.UpArrow))
        {
            playerScript.SetDirection(Vector3.forward);
        }
        else if (Input.GetKeyDown(KeyCode.DownArrow))
        {
            playerScript.SetDirection(Vector3.back);
        }
        else if (Input.GetKeyDown(KeyCode.RightArrow))
        {
            playerScript.SetDirection(Vector3.right);
        }
        else if (Input.GetKeyDown(KeyCode.LeftArrow))
        {
            playerScript.SetDirection(Vector3.left);
        }
        if (Input.GetKeyDown(KeyCode.R))
        {
            RespawnPlayer();
        }


        if (playerInGame != false && playerScript != null)
        {
            playerScript.UpdatePosition();
        }
        
        

    }

    public void RespawnPlayer()
    {
        //Reactivate the player gaemobject
        playerGameObject.gameObject.SetActive(true);
        playerInGame = true;
    }

    public void SpawnCherrys()
    {
        


        foreach (GameObject obj in walls.nodes)
        {
            //Check to see if the node is walkable, if it is store the node in a list
            //When the enemy is in the scatter state a random node from walkable nodes will be chosen as the target
            Node node = obj.GetComponent<Node>();
            if (node.isWalkable)
            {
                walkableNodes.Add(node);
            }

            

        }

        for (int i = 0; i < 4; i++)
        {
            int index = (UnityEngine.Random.Range(0, walkableNodes.Count));

            Instantiate(cherryGameObject, walkableNodes[index].transform.position, Quaternion.identity);
        }
    }
}
